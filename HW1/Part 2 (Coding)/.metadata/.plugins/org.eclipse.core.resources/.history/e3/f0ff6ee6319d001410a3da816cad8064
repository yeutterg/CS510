import java.util.ArrayList;


public class Moves {
	
	// Part 2.C: Move Generation
	
	public static ArrayList<Character> possiblePieceMoves(int[][] state, int piece) {
		// return all possible moves for a piece given a game state
				
		// initialize possible moves matrix
		ArrayList<Character> possibleMoves = new ArrayList<Character>();
		
		// locate piece in game state
		ArrayList<int[]> pieceLocations = valueLocations(state, piece);
		
		// look for all zeros (empty) in game state
		ArrayList<int[]> zeroLocations = valueLocations(state, 0);
		possibleMoves.addAll(compareMoves(pieceLocations, zeroLocations));
		
		// if piece = master (2), look for -1 values as well
		if (piece == 2) {
			ArrayList<int[]> negOneLocations = valueLocations(state, -1);
			possibleMoves.addAll(compareMoves(pieceLocations, negOneLocations));
		}
		
		return possibleMoves;
	}
	
	public static ArrayList<int[]> valueLocations(int[][] state, int value) {
		// Find and return coordinates of specific value in specified game state
		
		ArrayList<int[]> locations = new ArrayList<int[]>();
		int w = 0;
		int h = 0;
		for (int[] row : state) {
			for (int num : row) {
				if (num == value) {
					locations.add(new int[] {h, w});
				}
				w++;
			}
			h++;
			w = 0;
		}
		
		return locations;
	}
	
	public static ArrayList<Character> compareMoves(ArrayList<int[]> pieceState, 
			ArrayList<int[]> targetState) {
		// Compare two states and output possible moves
		
		ArrayList<Character> possibleMoves = new ArrayList<Character>();
		
		for (int[] cellPiece : pieceState) {
			int wPiece = cellPiece[1];
			int hPiece = cellPiece[0];
			for (int[] cellTarget : targetState) {
				int wTarget = cellTarget[1];
				int hTarget = cellTarget[0];
				
				if (wTarget == (wPiece + 1)) {
					// Possible to move right
					possibleMoves.add('r');
				} else if (wTarget == (wPiece - 1)) {
					// Possible to move left
					possibleMoves.add('l');
				} else if (hTarget == (hPiece + 1)) {
					// Possible to move up
					possibleMoves.add('u');
				} else if (hTarget == (hPiece - 1)) {
					// Possible to move down
					possibleMoves.add('d');
				}
			}
			
		}
		
		return possibleMoves;
	}

}
