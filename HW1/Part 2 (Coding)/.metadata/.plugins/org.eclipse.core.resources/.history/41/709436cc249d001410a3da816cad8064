import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;


public class StateRepresentation {
	
	// Part 2.A: State Representation
	
	// Variables 
	static int[][] gameState = null;
	static int width = 0;
	static int height = 0;
	
	public static void main(String[] args) {
		loadGameState("D:/Academic/Winter 2015/CS 510 Artificial Intelligence/Homework/HW1/HW1/SBP-level1.txt");
		displayGameState();
	}
	
	public static void loadGameState(String fileName) {
		// Load predefined game state from a text file
		
		// Initialize scanner and input array, input file
		ArrayList<Integer> rawInput = new ArrayList<Integer>(); // hold input values in ArrayList
		try {
			Scanner sc = new Scanner(new File(fileName)); // Scan in file
			// sc = scanner for lines within file, sc2 = scanner for values within line
			while (sc.hasNext()) {
				Scanner sc2 = new Scanner(sc.next()); // Scan in line to obtain individual values
				sc2.useDelimiter(","); // use comma delimiter
				while (sc2.hasNextInt()) {
					rawInput.add(sc2.nextInt()); // add value to rawInput
				}
				sc2.close(); // close scanner
			}
			sc.close(); // close scanner
			System.out.println(rawInput);
		} catch (FileNotFoundException e) {
			System.out.println("Error: File Not Found.");
			e.printStackTrace();
		}

		
		// Parse input and apply it to gameState	
		parseInputToGameState(rawInput); // pass ArrayList to be parsed
	}
	
	public static void displayGameState() {
		// Display current game state in the console
		
		for (int h = 0; h < height; h++) {
			for (int w = 0; w < width; w++) {
				System.out.print(gameState[h][w] + " ");
			}
			System.out.print("\n");
		}
		
	}
	
	public static void cloneGameState() {
		// Clone a game state
		// TODO complete
		
	}
	
	public static void parseInputToGameState(ArrayList<Integer> input) {
		// Parse ArrayList input to the integer matrix gameState
		
		// Set up w,h of gameState
		width = input.get(0);
		height = input.get(1);
		gameState = new int[height][width]; // set up gameState matrix with specified w,h
		
		// Populate gameState with values
		int w = 0;
		int h = 0;
		for (int i = 2; i < input.size(); i++) {
			if (w < width) {
				// fill row
				gameState[h][w] = input.get(i);
				w++;
			} else {
				// next row
				w = 0;
				h++;
				gameState[h][w] = input.get(i);
				w++;
			}
		}
		
		
	}

}
