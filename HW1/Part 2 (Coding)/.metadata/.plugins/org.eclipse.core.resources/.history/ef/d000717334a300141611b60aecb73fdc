import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class Movement {
	
	// Part 2.C: Move Generation
	
	public static Piece possiblePieceMoves(int[][] state, int pieceNum) {
		// return all possible moves for a piece given a game state
				
		// initialize possible moves array
		ArrayList<Character> possibleMovesArray = new ArrayList<Character>();
		
		// locate piece in game state
		ArrayList<int[]> pieceLocations = currentPieceLocations(state, pieceNum);
		
		// look for all zeros (empty) in game state
		ArrayList<int[]> zeroLocations = currentPieceLocations(state, 0);
		possibleMovesArray.addAll(compareMoves(pieceLocations, zeroLocations));
		
		// if piece = master (2), look for -1 values as well
		if (pieceNum == 2) {
			ArrayList<int[]> negOneLocations = currentPieceLocations(state, -1);
			possibleMovesArray.addAll(compareMoves(pieceLocations, negOneLocations));
		}
		
		// Only add move to possible result set if all cells of piece can freely move up or down
		// Set will prevent duplicates from being added
		Set<Character> possibleMovesSet = new HashSet<Character>();
		
		for (Character currentMove : possibleMovesArray) {
			if (pieceLocations.size() > 1 && ((currentMove == 'u') || currentMove == 'd')) {
				// If more than one cell, we need to check
				int numInstances = 0;
				for (int i = 0; i < possibleMovesArray.size(); i++) {
					// Find all instances of the same character
					if (possibleMovesArray.get(i) == currentMove) {
						numInstances++;
					}
					// Only add to output set if number of instances = size of piece
					if (numInstances == pieceLocations.size()) {
						possibleMovesSet.add(currentMove);
					}
				}
			} else {
				// Otherwise, we need to just add the value to the output set
				possibleMovesSet.add(currentMove);
			}
		}	
		
		System.out.println("Possible: " + pieceNum + "," + possibleMovesSet);
		
		return new Piece(pieceNum, possibleMovesSet);
	}
	
	public static ArrayList<Move> allPossibleMoves(int[][] state) {
		// return all possible moves for all pieces given a game state
		
		// find all pieces in current game state (>= 2)
		ArrayList<Integer> currentPieces = new ArrayList<Integer>();
		for (int[] row : state) {
			for (int value : row) {
				if (!currentPieces.contains(value) && (value >= 2)) {
					currentPieces.add(value);
				}
			}
		}
		
		// get all possible piece moves
		ArrayList<Move> allMoves = new ArrayList<Move>();
		for (int thisPieceNum : currentPieces) {
			Piece thisPiece = possiblePieceMoves(state, thisPieceNum);
			allMoves.addAll(thisPiece.generateIndividualMoves());
			for (int i = 0; i < allMoves.size(); i++) {
				Move thisMove = allMoves.get(i);
				System.out.println(thisMove.getPieceNum());
				System.out.println(thisMove.getMove());
			}
		}
		
		
		
		return allMoves;
	}
	
	public static void applyMove(int[][] state, int pieceNum, char requestedMove) {
		// move specified piece and apply to gameState
		
		// move piece over cell(s), fill old location with zeros
		ArrayList<int[]> originalLocations = currentPieceLocations(state, pieceNum);
		Piece possibleMoves = possiblePieceMoves(state, pieceNum);
		int numRight = 0; // number of times moved right
		
		for (int[] location : originalLocations) {
			if (possibleMoves.isMovePossible(requestedMove)) {
				int w = location[1];
				int h = location[0];
				
				if (requestedMove == 'u') {
					// Move up
					state[h-1][w] = pieceNum;					
				} else if (requestedMove == 'd') {
					// Move down
					state[h+1][w] = pieceNum;
				} else if (requestedMove == 'l') {
					// Move left
					state[h][w-1] = pieceNum;
				} else if (requestedMove == 'r') {
					// Move right
					state[h][w+1] = pieceNum;
					numRight++;
				}
				
				// empty moved from cell, unless we move right >1x
				if (requestedMove != 'r' || numRight <= 1) {
					state[h][w] = 0; // Make moved from cell empty
				}
			}
		}
		States.gameState = state;
	}
	
	public static int[][] applyMoveCloning(int[][] state, int pieceNum, char requestedMove) {
		// move specified piece and apply to a cloned state
		
		// move piece over cell(s), fill old location with zeros
		ArrayList<int[]> originalLocations = currentPieceLocations(state, pieceNum);
		Piece possibleMoves = possiblePieceMoves(state, pieceNum);
		for (int[] location : originalLocations) {
			if (possibleMoves.isMovePossible(requestedMove)) {
				int w = location[1];
				int h = location[0];
				if (requestedMove == 'u') {
					// Move up
					state[h-1][w] = pieceNum;					
				} else if (requestedMove == 'd') {
					// Move down
					state[h+1][w] = pieceNum;
				} else if (requestedMove == 'l') {
					// Move left
					state[h][w-1] = pieceNum;
				} else if (requestedMove == 'r') {
					// Move right
					state[h][w+1] = pieceNum;
				}
				state[h][w] = 0; // Make moved from cell empty
			}
		}
		return state;
	}
	
	public static ArrayList<int[]> currentPieceLocations(int[][] state, int pieceNum) {
		// Find and return coordinates of specific value in specified game state
		
		ArrayList<int[]> locations = new ArrayList<int[]>();
		int w = 0;
		int h = 0;
		for (int[] row : state) {
			for (int num : row) {
				if (num == pieceNum) {
					locations.add(new int[] {h, w});
				}
				w++;
			}
			h++;
			w = 0;
		}
		
		return locations;
	}
	
	public static ArrayList<Character> compareMoves(ArrayList<int[]> pieceState, 
			ArrayList<int[]> targetState) {
		// Compare two states and output possible moves
		
		ArrayList<Character> possibleMoves = new ArrayList<Character>();
		
		for (int[] cellPiece : pieceState) {
			int wPiece = cellPiece[1];
			int hPiece = cellPiece[0];
			for (int[] cellTarget : targetState) {
				int wTarget = cellTarget[1];
				int hTarget = cellTarget[0];
				
				if ((wTarget == (wPiece + 1)) && (hTarget == hPiece)) {
					// Possible to move right
					possibleMoves.add('r');
				} else if ((wTarget == (wPiece - 1)) && (hTarget == hPiece)) {
					// Possible to move left
					possibleMoves.add('l');
				} else if ((hTarget == (hPiece + 1)) && (wTarget == wPiece)) {
					// Possible to move down
					possibleMoves.add('d');
				} else if ((hTarget == (hPiece - 1)) && (wTarget == wPiece)) {
					// Possible to move up
					possibleMoves.add('u');
				}	
			}
			
		}
		
		return possibleMoves;
	}
	

}
