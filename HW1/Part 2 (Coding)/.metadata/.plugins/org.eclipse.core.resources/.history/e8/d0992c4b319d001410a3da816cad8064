import java.util.ArrayList;


public class Moves {
	
	// Part 2.C: Move Generation
	
	public static ArrayList<Character> possiblePieceMoves(int[][] state, int piece) {
		// return all possible moves for a piece given a game state
				
		// initialize possible moves matrix
		ArrayList<Character> possibleMoves = new ArrayList<Character>();
		
		// locate piece in game state
		ArrayList<int[]> pieceLocation = valueLocations(state, piece);
		
		// look for all zeros in game state
		ArrayList<int[]> zeroLocations = valueLocations(state, 0);
		
		// if piece = master (2), look for -1 values
		if (piece == 2) {
			ArrayList<int[]> negOneLocations = valueLocations(state, -1);
		}
		
		return possibleMoves;
	}
	
	public static ArrayList<int[]> valueLocations(int[][] state, int value) {
		// Find and return coordinates of specific value in specified game state
		
		ArrayList<int[]> locations = new ArrayList<int[]>();
		int w = 0;
		int h = 0;
		for (int[] row : state) {
			for (int num : row) {
				if (num == value) {
					locations.add(new int[] {h, w});
				}
				w++;
			}
			h++;
			w = 0;
		}
		
		return locations;
	}
	
	public static ArrayList<Character> compareMoves(int[][] pieceState, int[][] targetState) {
		// Compare two states and output possible moves
		
	}

}
